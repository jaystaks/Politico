# Politico API

Politico is an online voting system where voters exercide their freedom.

## API Endpoint Specifications.

## Political parties [/parties]

### Create a new party [POST]

+ Response 201 (application/json)

        {
            “status” : Integer,
            “data” : [{
            “id”: Integer, // id of newly created party
            “name”: String,
            }]
        }

### Fetch a specific political party record. [GET /parties/<party-id>]

+ Response 200 (application/json)

        {
            “status” : Integer,
            “data” : [{
            “id” : Integer, // political party unique id
            “name” : String,
            “logoUrl”: String,
            }]
        }

### Fetch all parties. [GET /parties/]

+ Response 200 (application/json)

        {
            “status” : Integer,
            “data” : [
            {
            “id” : Integer, // political party unique id
            “name” : String,
            “logoUrl”: String,
            } , {
            “id” : Integer, // political party unique id
            “name” : String,
            “logoUrl”: String,
            } , {
            “id” : Integer, // political party unique id
            “name” : String,
            “logoUrl”: String,
            } , {
            “id” : Integer, // political party unique id
            “name” : String,
            “logoUrl”: String,
            }
            ]
        }
        
### Edit a specific political party name. [PATCH /parties/<party-id>/name]

+ Response 200 (application/json)

        {
            “status” : Integer,
            “data” : [{
            “id”: Integer, // political party unique id
            “name” : String, // the new name of the political party
            }]
        }

### Delete a specific political party record. [DELETE /parties/<party-id>]

+ Response 200 (application/json)

        {
            “status” : Integer,
            “data” : [{
            “message”: String
            }]
        }

## Political Offices [/offices]

### Fetch all political offices. [GET /offices]

+ Response 200 (application/json)

        {
            “status” : Integer,
            “data” : [
            {
            “id” : Integer, // office record unique id
            “type” : String, // type of office
            “name”: String // name of office
            }, {
            “id” : Integer, // office record unique id
            “type” : String, // type of office
            “name”: String // name of office
            }, {
            “id” : Integer, // office record unique id
            “type” : String, // type of office
            “name”: String // name of office
            }
            ]
        }
### Create a political office. [POST /offices]

+ Response 201 (application/json)

        {
            “status” : Integer,
            “data” : [{
            “id” : Integer, // id of newly created office
            “type” : String, // type of office
            “name” : String, // name of office
            }]
        }

### Fetch a specific political office record. [GET /offices/<office-id>]

+ Response 200 (application/json)

        {
            “status” : Integer,
            “data” : [{
            “id” : Integer, // office record unique id
            “type” : String, // type of office
            “name”: String // name of office
            }]
        }